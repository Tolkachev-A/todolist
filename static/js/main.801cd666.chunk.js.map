{"version":3,"sources":["serviceWorker.ts","features/CommonActions/App.ts","utils/redux-utils.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/types/types.ts","api/config/config.ts","api/auth-api.ts","api/todolists-api.ts","features/Application/selectors/selectors.ts","utils/error-utils.ts","features/Auth/reduser/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/reducer/application-reducer.ts","features/Application/index.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","components/AddItemForm/AddItemForm.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/reducer/todolists-reducer.ts","features/TodolistsList/reducer/tasks-reducer.ts","features/TodolistsList/index.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","appActions","setAppStatus","createAction","setAppError","useAppDispatch","useDispatch","useActions","actions","dispatch","useMemo","bindActionCreators","Alert","props","elevation","variant","ErrorSnackbar","error","useSelector","state","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","TaskStatusesType","TaskPriorities","instance","axios","create","baseURL","process","withCredentials","headers","authApi","data","post","delete","get","todolistsAPI","title","id","put","todolistId","taskId","taskTitile","model","selectStatus","status","selectIsInitialized","isInitialized","selectIsLoggedIn","auth","isLoggedIn","selectTodolists","todolists","selectTasks","tasks","handleAsyncServerAppError","thunkAPI","showError","messages","length","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","login","createAsyncThunk","param","a","res","resultCode","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","action","payload","value","extraReducers","builder","addCase","fulfilled","Login","reducer","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","rejected","setFieldError","field","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","type","FormControlLabel","control","Checkbox","checked","Button","color","authReducer","initializeApp","appReducer","EditableSpan","React","memo","useState","editMode","setEditMode","setTitle","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","Task","tasksActions","updateTask","removeTask","onClickHandler","useCallback","task","onChangeHandler","Completed","New","onTitleChangeHandler","newValue","key","className","style","position","IconButton","size","onClick","top","right","Delete","fontSize","AddItemForm","addItem","disabled","setError","onAddItemClick","trim","onKeyPress","charCode","helperText","marginLeft","AddBox","Todolist","demo","fetchTasks","todolistsActions","changeTodolistFilter","removeTodolistTC","changeTodolistTitleTC","useEffect","todolist","addTaskCallback","helper","thunk","addTask","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","filter","tasksForTodolist","t","renderFilterButton","buttonFilter","text","disabledIconButton","entityStatus","Paper","padding","map","paddingTop","TodolistsList","fetchTodolistsTC","addTodolistCallback","addTodolistTC","spacing","flexWrap","overflowX","minHeight","tl","allTodolistTasks","width","changeTodolistEntityStatus","index","findIndex","splice","unshift","items","getState","find","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","tasksReducer","App","onLogoutClick","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.801cd666.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the appActions load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web appActions is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different appActions. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. Application is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createAction } from '@reduxjs/toolkit';\n\nimport { Nullable } from 'api/types';\nimport { RequestStatusType } from 'features/Application/types';\n\nconst setAppStatus = createAction<{ status: RequestStatusType }>(\n  'appActions/setAppStatus',\n);\nconst setAppError = createAction<{ error: Nullable<string> }>('appActions/setAppError');\n\nexport const appActions = {\n  setAppStatus,\n  setAppError,\n};\n","import { useMemo } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { ActionCreatorsMapObject, bindActionCreators } from 'redux';\n\nimport { AppDispatchType } from './types';\n\nexport const useAppDispatch = (): any => useDispatch<AppDispatchType>();\n\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T): any {\n  const dispatch = useAppDispatch();\n\n  const boundActions = useMemo(() => {\n    return bindActionCreators(actions, dispatch);\n  }, []);\n\n  return boundActions;\n}\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions} from '../../utils/redux-utils'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","export type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\n\nexport type TodolistType = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\nexport type FieldErrorType = { field: string; error: string };\nexport type ResponseType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  fieldsErrors?: Array<FieldErrorType>;\n  data: D;\n};\n\nexport enum TaskStatusesType {\n  New = 0,\n  InProgress = 1,\n  // eslint-disable-next-line no-magic-numbers\n  Completed = 2,\n  // eslint-disable-next-line no-magic-numbers\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  // eslint-disable-next-line no-magic-numbers\n  Hi = 2,\n  // eslint-disable-next-line no-magic-numbers\n  Later = 4,\n}\n\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: TaskStatusesType;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatusesType;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\nexport type GetTasksResponse = {\n  error: Nullable<string>;\n  totalCount: number;\n  items: TaskType[];\n};\n\nexport type Nullable<T> = null | T;\n","import axios from 'axios';\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    'API-KEY': process.env.REACT_APP_API_KEY,\n  },\n};\n\nexport const instance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  ...settings,\n});\n","import { instance } from 'api/config/config';\nimport { LoginParamsType, ResponseType } from 'api/types';\n\nexport const authApi = {\n  login(data: LoginParamsType) {\n    return instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\n  },\n  logout() {\n    return instance.delete<ResponseType<{ userId?: number }>>('auth/login');\n  },\n  me() {\n    return instance.get<ResponseType<{ id: number; email: string; login: string }>>(\n      'auth/me',\n    );\n  },\n};\n","import { instance } from 'api/config/config';\nimport {\n  GetTasksResponse,\n  ResponseType,\n  TaskType,\n  TodolistType,\n  UpdateTaskModelType,\n} from 'api/types';\n\nexport const todolistsAPI = {\n  getTodolists() {\n    return instance.get<TodolistType[]>('todo-lists');\n  },\n\n  createTodolist(title: string) {\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {\n      title,\n    });\n  },\n\n  deleteTodolist(id: string) {\n    return instance.delete<ResponseType>(`todo-lists/${id}`);\n  },\n\n  updateTodolist(id: string, title: string) {\n    return instance.put<ResponseType>(`todo-lists/${id}`, { title });\n  },\n\n  getTasks(todolistId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n\n  createTask(todolistId: string, taskTitile: string) {\n    return instance.post<ResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistId}/tasks`,\n      { title: taskTitile },\n    );\n  },\n\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    return instance.put<ResponseType<TaskType>>(\n      `todo-lists/${todolistId}/tasks/${taskId}`,\n      model,\n    );\n  },\n};\n","import { TasksStateType } from 'features/TodolistsList/reducer/tasks-reducer';\nimport { TodolistDomainType } from 'features/TodolistsList/reducer/todolists-reducer';\nimport { AppRootStateType } from 'utils/types';\n\nexport const selectStatus = (state: AppRootStateType): string => state.app.status;\n\nexport const selectIsInitialized = (state: AppRootStateType): boolean =>\n  state.app.isInitialized;\n\nexport const selectIsLoggedIn = (state: AppRootStateType): boolean =>\n  state.auth.isLoggedIn;\n\nexport const selectTodolists = (state: AppRootStateType): TodolistDomainType[] =>\n  state.todolists;\n\nexport const selectTasks = (state: AppRootStateType): TasksStateType => state.tasks;\n","import { AxiosError } from 'axios';\n\nimport { ResponseType } from 'api/types';\nimport { appActions } from 'features/CommonActions/App';\n\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\ntype ThunkAPIType = {\n  dispatch: (action: any) => any;\n  rejectWithValue: Function;\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const handleAsyncServerAppError = <D>(\n  data: ResponseType<D>,\n  thunkAPI: ThunkAPIType,\n  showError = true,\n) => {\n  if (showError) {\n    thunkAPI.dispatch(\n      appActions.setAppError({\n        error: data.messages.length ? data.messages[0] : 'Some error occurred',\n      }),\n    );\n  }\n  thunkAPI.dispatch(appActions.setAppStatus({ status: 'failed' }));\n\n  return thunkAPI.rejectWithValue({\n    errors: data.messages,\n    fieldsErrors: data.fieldsErrors,\n  });\n};\n\nexport const handleAsyncServerNetworkError = (\n  error: AxiosError,\n  thunkAPI: ThunkAPIType,\n  showError = true,\n): void => {\n  if (showError) {\n    thunkAPI.dispatch(\n      appActions.setAppError({\n        error: error.message ? error.message : 'Some error occurred',\n      }),\n    );\n  }\n  thunkAPI.dispatch(appActions.setAppStatus({ status: 'failed' }));\n\n  return thunkAPI.rejectWithValue({ errors: [error.message], fieldsErrors: undefined });\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AxiosError } from 'axios';\n\nimport { authApi } from 'api';\nimport { FieldErrorType, LoginParamsType } from 'api/types/types';\nimport { appActions } from 'features/CommonActions/App';\nimport {\n  handleAsyncServerAppError,\n  handleAsyncServerNetworkError,\n} from 'utils/error-utils';\n\nconst { setAppStatus } = appActions;\n\nexport const login = createAsyncThunk<\n  undefined,\n  LoginParamsType,\n  { rejectValue: { errors: Array<string>; fieldsErrors?: Array<FieldErrorType> } }\n>('auth/login', async (param, thunkAPI) => {\n  thunkAPI.dispatch(setAppStatus({ status: 'loading' }));\n  try {\n    const res = await authApi.login(param);\n\n    if (res.data.resultCode === 0) {\n      thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }));\n\n      return;\n    }\n\n    return handleAsyncServerAppError(res.data, thunkAPI);\n  } catch (error) {\n    return handleAsyncServerNetworkError(error as AxiosError, thunkAPI);\n  }\n});\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\n  thunkAPI.dispatch(setAppStatus({ status: 'loading' }));\n  try {\n    const res = await authApi.logout();\n\n    if (res.data.resultCode === 0) {\n      thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }));\n\n      return;\n    }\n\n    return handleAsyncServerAppError(res.data, thunkAPI);\n  } catch (error) {\n    return handleAsyncServerNetworkError(error as AxiosError, thunkAPI);\n  }\n});\n\nexport const asyncActions = {\n  login,\n  logout,\n};\n\nexport const slice = createSlice({\n  name: 'auth',\n  initialState: {\n    isLoggedIn: false,\n  },\n  reducers: {\n    setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\n      state.isLoggedIn = action.payload.value;\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(login.fulfilled, state => {\n        state.isLoggedIn = true;\n      })\n      .addCase(logout.fulfilled, state => {\n        state.isLoggedIn = false;\n      });\n  },\n});\n\nexport const authReducer = slice.reducer;\nexport const { setIsLoggedIn } = slice.actions;\n","import React, { ReactElement } from 'react';\n\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  TextField,\n} from '@material-ui/core';\nimport { FormikHelpers, useFormik } from 'formik';\nimport { useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { authActions } from './index';\n\nimport { selectIsLoggedIn } from 'features/Application/selectors';\nimport { login } from 'features/Auth/reduser/auth-reducer';\nimport { useAppDispatch } from 'utils/redux-utils';\n\ntype FormValuesType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\n\nexport const Login = (): ReactElement => {\n  const dispatch = useAppDispatch();\n\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const formik = useFormik({\n    validate: values => {\n      if (!values.email) {\n        return {\n          email: 'Email is required',\n        };\n      }\n      if (!values.password) {\n        return {\n          password: 'Password is required',\n        };\n      }\n    },\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n    onSubmit: async (\n      values: FormValuesType,\n      formikHelpers: FormikHelpers<FormValuesType>,\n    ) => {\n      const resultAction = await dispatch(authActions.login(values));\n\n      if (login.rejected.match(resultAction)) {\n        if (resultAction.payload?.fieldsErrors?.length) {\n          const error = resultAction.payload?.fieldsErrors[0];\n\n          formikHelpers.setFieldError(error.field, error.error);\n        }\n      }\n    },\n  });\n\n  if (isLoggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={4}>\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered{' '}\n                <a\n                  href=\"https://social-network.samuraijs.com/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p> Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps('email')}\n              />\n              {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps('password')}\n              />\n              {formik.errors.password ? <div>{formik.errors.password}</div> : null}\n              <FormControlLabel\n                label=\"Remember me\"\n                control={\n                  <Checkbox\n                    {...formik.getFieldProps('rememberMe')}\n                    checked={formik.values.rememberMe}\n                  />\n                }\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import { Login } from './Login';\n\nimport { asyncActions, slice } from 'features/Auth/reduser';\n\nconst authActions = {\n  ...asyncActions,\n  ...slice.actions,\n};\n\nconst authReducer = slice.reducer;\n\nexport { Login, authActions, authReducer };\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nimport { authApi } from 'api';\nimport { InitialStateType } from 'features/Application/types';\nimport { authActions } from 'features/Auth';\nimport { appActions } from 'features/CommonActions/App';\n\nconst initializeApp = createAsyncThunk(\n  'application/initializeApp',\n  async (param, { dispatch }) => {\n    const res = await authApi.me();\n\n    if (res.data.resultCode === 0) {\n      dispatch(authActions.setIsLoggedIn({ value: true }));\n    }\n  },\n);\n\nexport const asyncActions = {\n  initializeApp,\n};\n\nexport const slice = createSlice({\n  name: 'app',\n  initialState: {\n    status: 'idle',\n    error: null,\n    isInitialized: false,\n  } as InitialStateType,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(initializeApp.fulfilled, state => {\n        state.isInitialized = true;\n      })\n      .addCase(appActions.setAppStatus, (state, action) => {\n        state.status = action.payload.status;\n      })\n      .addCase(appActions.setAppError, (state, action) => {\n        state.error = action.payload.error;\n      });\n  },\n});\n","import { asyncActions, slice } from 'features/Application/reducer';\nimport * as appSelectors from 'features/Application/selectors';\nimport { InitialStateType as T1 } from 'features/Application/types';\n\nconst appReducer = slice.reducer;\nconst { actions } = slice;\n\nconst appActions = {\n  ...actions,\n  ...asyncActions,\n};\n\nexport type RequestStatusType = T1;\n\nexport { appSelectors, appReducer, appActions };\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { TextField } from '@material-ui/core';\n\ntype EditableSpanPropsType = {\n  value: string;\n  onChange: (newValue: string) => void;\n};\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n  const [editMode, setEditMode] = useState(false);\n  const [title, setTitle] = useState(props.value);\n\n  const activateEditMode = (): void => {\n    setEditMode(true);\n    setTitle(props.value);\n  };\n  const activateViewMode = (): void => {\n    setEditMode(false);\n    props.onChange(title);\n  };\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>): void => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n  ) : (\n    <span onDoubleClick={activateEditMode}>{props.value}</span>\n  );\n});\n","import React, { ChangeEvent, useCallback } from 'react';\n\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\n\nimport { TaskStatusesType, TaskType } from 'api/types/types';\nimport { EditableSpan } from 'components/EditableSpan';\nimport { tasksActions } from 'features/TodolistsList/index';\nimport { useActions } from 'utils/redux-utils';\n\ntype TaskPropsType = {\n  task: TaskType;\n  todolistId: string;\n};\n\nexport const Task = React.memo((props: TaskPropsType) => {\n  const { updateTask, removeTask } = useActions(tasksActions);\n\n  const onClickHandler = useCallback(\n    () => removeTask({ taskId: props.task.id, todolistId: props.todolistId }),\n    [props.task.id, props.todolistId],\n  );\n\n  const onChangeHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      updateTask({\n        taskId: props.task.id,\n        model: {\n          status: e.currentTarget.checked\n            ? TaskStatusesType.Completed\n            : TaskStatusesType.New,\n        },\n        todolistId: props.todolistId,\n      });\n    },\n    [props.task.id, props.todolistId],\n  );\n\n  const onTitleChangeHandler = useCallback(\n    (newValue: string) => {\n      updateTask({\n        taskId: props.task.id,\n        model: { title: newValue },\n        todolistId: props.todolistId,\n      });\n    },\n    [props.task.id, props.todolistId],\n  );\n\n  return (\n    <div\n      key={props.task.id}\n      className={props.task.status === TaskStatusesType.Completed ? 'is-done' : ''}\n      style={{ position: 'relative' }}\n    >\n      <Checkbox\n        checked={props.task.status === TaskStatusesType.Completed}\n        color=\"primary\"\n        onChange={onChangeHandler}\n      />\n\n      <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} />\n      <IconButton\n        size=\"small\"\n        onClick={onClickHandler}\n        style={{ position: 'absolute', top: '2px', right: '2px' }}\n      >\n        <Delete fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n});\n","import React, { ChangeEvent, KeyboardEvent, memo, ReactElement, useState } from 'react';\n\nimport { IconButton, TextField } from '@material-ui/core';\nimport { AddBox } from '@material-ui/icons';\n\nexport type AddItemFormSubmitHelperType = {\n  setError: (error: string) => void;\n  setTitle: (title: string) => void;\n};\ntype AddItemFormPropsType = {\n  addItem: (title: string, helper: AddItemFormSubmitHelperType) => void;\n  disabled?: boolean;\n};\n\nexport const AddItemForm = memo(\n  ({ addItem, disabled = false }: AddItemFormPropsType): ReactElement => {\n    const [title, setTitle] = useState('');\n    const [error, setError] = useState<string | null>(null);\n\n    const onAddItemClick = async (): Promise<void> => {\n      if (title.trim() !== '') {\n        addItem(title, { setError, setTitle });\n      } else {\n        setError('Title is required');\n      }\n    };\n\n    const onTextFieldChange = (e: ChangeEvent<HTMLInputElement>): void => {\n      setTitle(e.currentTarget.value);\n    };\n\n    const onKeyPressHandle = (e: KeyboardEvent<HTMLInputElement>): void => {\n      if (error !== null) {\n        setError(null);\n      }\n      // eslint-disable-next-line no-magic-numbers\n      if (e.charCode === 13) {\n        onAddItemClick();\n      }\n    };\n\n    return (\n      <div>\n        <TextField\n          variant=\"outlined\"\n          disabled={disabled}\n          error={!!error}\n          value={title}\n          onChange={onTextFieldChange}\n          onKeyPress={onKeyPressHandle}\n          label=\"Title\"\n          helperText={error}\n        />\n        <IconButton\n          color=\"primary\"\n          onClick={onAddItemClick}\n          disabled={disabled}\n          style={{ marginLeft: '5px' }}\n        >\n          <AddBox />\n        </IconButton>\n      </div>\n    );\n  },\n);\n","import React, { memo, ReactElement, useCallback, useEffect } from 'react';\n\nimport { Button, IconButton, Paper, PropTypes } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\n\nimport { tasksActions, todolistsActions } from '../index';\n\nimport { Task } from './Task';\n\nimport { TaskStatusesType, TaskType } from 'api/types';\nimport {\n  AddItemForm,\n  AddItemFormSubmitHelperType,\n} from 'components/AddItemForm/AddItemForm';\nimport { EditableSpan } from 'components/EditableSpan';\nimport {\n  FilterValuesType,\n  TodolistDomainType,\n} from 'features/TodolistsList/reducer/todolists-reducer';\nimport { useActions, useAppDispatch } from 'utils/redux-utils';\n\ntype PropsType = {\n  todolist: TodolistDomainType;\n  tasks: Array<TaskType>;\n  demo?: boolean;\n};\n\n// eslint-disable-next-line func-names\nexport const Todolist = memo(function ({\n  demo = false,\n  ...props\n}: PropsType): ReactElement {\n  const dispatch = useAppDispatch();\n\n  const { fetchTasks } = useActions(tasksActions);\n  const { changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC } =\n    useActions(todolistsActions);\n\n  useEffect(() => {\n    if (demo) {\n      return;\n    }\n    fetchTasks(props.todolist.id);\n  }, []);\n\n  const addTaskCallback = useCallback(\n    async (title: string, helper: AddItemFormSubmitHelperType) => {\n      const thunk = tasksActions.addTask({ title, todolistId: props.todolist.id });\n      const resultAction = await dispatch(thunk);\n\n      if (tasksActions.addTask.rejected.match(resultAction)) {\n        if (resultAction.payload?.errors?.length) {\n          const errorMessage = resultAction.payload?.errors[0];\n\n          helper.setError(errorMessage);\n\n          return;\n        }\n\n        helper.setError('Some error occured');\n\n        return;\n      }\n\n      helper.setTitle('');\n    },\n    [props.todolist.id],\n  );\n\n  const removeTodolist = (): void => {\n    removeTodolistTC(props.todolist.id);\n  };\n  const changeTodolistTitle = useCallback(\n    (title: string) => {\n      changeTodolistTitleTC({ id: props.todolist.id, title });\n    },\n    [props.todolist.id],\n  );\n\n  const onFilterButtonClickHandler = useCallback(\n    (filter: FilterValuesType) =>\n      changeTodolistFilter({\n        filter,\n        id: props.todolist.id,\n      }),\n    [props.todolist.id],\n  );\n\n  let tasksForTodolist = props.tasks;\n\n  if (props.todolist.filter === 'active') {\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatusesType.New);\n  }\n  if (props.todolist.filter === 'completed') {\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatusesType.Completed);\n  }\n\n  const renderFilterButton = (\n    buttonFilter: FilterValuesType,\n    color: PropTypes.Color,\n    text: string,\n  ): ReactElement => {\n    return (\n      <Button\n        variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\n        onClick={() => onFilterButtonClickHandler(buttonFilter)}\n        color={color}\n      >\n        {text}\n      </Button>\n    );\n  };\n  // @ts-ignore\n  const disabledIconButton = props.todolist.entityStatus === 'loading';\n\n  return (\n    <Paper style={{ padding: '10px', position: 'relative' }}>\n      <IconButton\n        size=\"small\"\n        onClick={removeTodolist}\n        disabled={disabledIconButton}\n        style={{ position: 'absolute', right: '5px', top: '5px' }}\n      >\n        <Delete fontSize=\"small\" />\n      </IconButton>\n      <h3>\n        <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} />\n      </h3>\n      <AddItemForm addItem={addTaskCallback} disabled={disabledIconButton} />\n      <div>\n        {tasksForTodolist.map(t => (\n          <Task key={t.id} task={t} todolistId={props.todolist.id} />\n        ))}\n        {!tasksForTodolist.length && (\n          <div style={{ padding: '10px', color: 'grey' }}>No task</div>\n        )}\n      </div>\n      <div style={{ paddingTop: '10px' }}>\n        {renderFilterButton('all', 'default', 'All')}\n        {renderFilterButton('active', 'primary', 'Active')}\n        {renderFilterButton('completed', 'secondary', 'Completed')}\n      </div>\n    </Paper>\n  );\n});\n","import React, { useCallback, useEffect } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { Todolist } from './Todolist/Todolist';\n\nimport { todolistsActions } from './index';\n\nimport { AddItemForm, AddItemFormSubmitHelperType } from 'components/AddItemForm';\nimport { selectIsLoggedIn } from 'features/Application/selectors';\nimport { selectTasks, selectTodolists } from 'features/Application/selectors/selectors';\nimport { useActions, useAppDispatch } from 'utils/redux-utils';\n\ntype PropsType = {\n  demo?: boolean;\n};\n\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\n  const dispatch = useAppDispatch();\n\n  const todolists = useSelector(selectTodolists);\n  const tasks = useSelector(selectTasks);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const { fetchTodolistsTC } = useActions(todolistsActions);\n\n  const addTodolistCallback = useCallback(\n    async (title: string, helper: AddItemFormSubmitHelperType) => {\n      const thunk = todolistsActions.addTodolistTC(title);\n      const resultAction = await dispatch(thunk);\n\n      if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\n        if (resultAction.payload?.errors?.length) {\n          const errorMessage = resultAction.payload?.errors[0];\n\n          helper.setError(errorMessage);\n        } else {\n          helper.setError('Some error occured');\n        }\n      } else {\n        helper.setTitle('');\n      }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (demo || !isLoggedIn) {\n      return;\n    }\n    fetchTodolistsTC();\n  }, []);\n\n  if (!isLoggedIn) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <>\n      <Grid container style={{ padding: '20px' }}>\n        <AddItemForm addItem={addTodolistCallback} />\n      </Grid>\n      <Grid\n        container\n        spacing={3}\n        style={{\n          flexWrap: 'nowrap',\n          overflowX: 'scroll',\n          minHeight: 'calc(100vh - 64px - 96px)',\n        }}\n      >\n        {todolists.map(tl => {\n          const allTodolistTasks = tasks[tl.id];\n\n          return (\n            <Grid item key={tl.id}>\n              <div style={{ width: '300px' }}>\n                <Todolist todolist={tl} tasks={allTodolistTasks} demo={demo} />\n              </div>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AxiosError } from 'axios';\n\nimport { todolistsAPI } from 'api/todolists-api';\nimport { TodolistType } from 'api/types/types';\nimport { RequestStatusType } from 'features/Application/types';\nimport { appActions } from 'features/CommonActions/App';\nimport {\n  handleAsyncServerAppError,\n  handleAsyncServerNetworkError,\n} from 'utils/error-utils';\nimport { ThunkError } from 'utils/types';\n\nconst { setAppStatus } = appActions;\n\nconst fetchTodolistsTC = createAsyncThunk<\n  { todolists: TodolistType[] },\n  undefined,\n  ThunkError\n>('todolists/fetchTodolists', async (param, thunkAPI): Promise<any> => {\n  thunkAPI.dispatch(setAppStatus({ status: 'loading' }));\n  try {\n    const res = await todolistsAPI.getTodolists();\n\n    thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }));\n\n    return { todolists: res.data };\n  } catch (error) {\n    return handleAsyncServerNetworkError(error as AxiosError, thunkAPI);\n  }\n});\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>(\n  'todolists/removeTodolist',\n  async (todolistId, { dispatch }) => {\n    dispatch(setAppStatus({ status: 'loading' }));\n    dispatch(changeTodolistEntityStatus({ id: todolistId, status: 'loading' }));\n\n    await todolistsAPI.deleteTodolist(todolistId);\n\n    // скажем глобально приложению, что асинхронная операция завершена\n    dispatch(setAppStatus({ status: 'succeeded' }));\n\n    return { id: todolistId };\n  },\n);\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>(\n  'todolists/addTodolist',\n  async (title, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatus({ status: 'loading' }));\n    try {\n      const res = await todolistsAPI.createTodolist(title);\n\n      if (res.data.resultCode === 0) {\n        thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }));\n\n        return { todolist: res.data.data.item };\n      }\n\n      return handleAsyncServerAppError(res.data, thunkAPI, false);\n    } catch (error) {\n      return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false);\n    }\n  },\n);\nconst changeTodolistTitleTC = createAsyncThunk(\n  'todolists/changeTodolistTitle',\n  async (param: { id: string; title: string }, thunkAPI) => {\n    try {\n      const res = await todolistsAPI.updateTodolist(param.id, param.title);\n\n      if (res.data.resultCode === 0) {\n        thunkAPI.dispatch(setAppStatus({ status: 'succeeded' }));\n\n        return { id: param.id, title: param.title };\n      }\n\n      return handleAsyncServerAppError(res.data, thunkAPI);\n    } catch (error) {\n      return handleAsyncServerNetworkError(error as AxiosError, thunkAPI, false);\n    }\n  },\n);\n\nexport const asyncActions = {\n  fetchTodolistsTC,\n  removeTodolistTC,\n  addTodolistTC,\n  changeTodolistTitleTC,\n};\n\nexport const slice = createSlice({\n  name: 'todolists',\n  initialState: [] as Array<TodolistDomainType>,\n  reducers: {\n    changeTodolistFilter(\n      state,\n      action: PayloadAction<{ id: string; filter: FilterValuesType }>,\n    ) {\n      const index = state.findIndex(tl => tl.id === action.payload.id);\n\n      state[index].filter = action.payload.filter;\n    },\n    changeTodolistEntityStatus(\n      state,\n      action: PayloadAction<{ id: string; status: RequestStatusType }>,\n    ) {\n      const index = state.findIndex(tl => tl.id === action.payload.id);\n\n      state[index].entityStatus = action.payload.status;\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\n        return action.payload.todolists.map(tl => ({\n          ...tl,\n          filter: 'all',\n          entityStatus: 'idle',\n        }));\n      })\n      .addCase(removeTodolistTC.fulfilled, (state, action) => {\n        const index = state.findIndex(tl => tl.id === action.payload.id);\n\n        if (index > -1) {\n          state.splice(index, 1);\n        }\n      })\n      .addCase(addTodolistTC.fulfilled, (state, action) => {\n        state.unshift({\n          ...action.payload.todolist,\n          filter: 'all',\n          entityStatus: 'idle',\n        });\n      })\n      .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\n        const index = state.findIndex(tl => tl.id === action.payload.id);\n\n        state[index].title = action.payload.title;\n      });\n  },\n});\n\nexport const { changeTodolistFilter, changeTodolistEntityStatus } = slice.actions;\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterValuesType;\n  entityStatus: RequestStatusType;\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { AxiosError } from 'axios';\n\nimport { todolistsAPI } from 'api/todolists-api';\nimport {\n  TaskPriorities,\n  TaskStatusesType,\n  TaskType,\n  UpdateTaskModelType,\n} from 'api/types/types';\nimport { appActions } from 'features/CommonActions/App';\nimport { asyncActions as asyncTodolistsActions } from 'features/TodolistsList/reducer/todolists-reducer';\nimport {\n  handleAsyncServerAppError,\n  handleAsyncServerNetworkError,\n} from 'utils/error-utils';\nimport { AppRootStateType, ThunkError } from 'utils/types';\n\nconst initialState: TasksStateType = {};\n\nexport const fetchTasks = createAsyncThunk<\n  { tasks: TaskType[]; todolistId: string },\n  string,\n  ThunkError\n>('tasks/fetchTasks', async (todolistId, thunkAPI): Promise<any> => {\n  thunkAPI.dispatch(appActions.setAppStatus({ status: 'loading' }));\n  try {\n    const res = await todolistsAPI.getTasks(todolistId);\n    const tasks = res.data.items;\n\n    thunkAPI.dispatch(appActions.setAppStatus({ status: 'succeeded' }));\n\n    return { tasks, todolistId };\n  } catch (error) {\n    return handleAsyncServerNetworkError(error as AxiosError, thunkAPI);\n  }\n});\nexport const removeTask = createAsyncThunk<\n  { taskId: string; todolistId: string },\n  { taskId: string; todolistId: string },\n  ThunkError\n>('tasks/removeTask', async param => {\n  await todolistsAPI.deleteTask(param.todolistId, param.taskId);\n\n  return { taskId: param.taskId, todolistId: param.todolistId };\n});\nexport const addTask = createAsyncThunk<\n  TaskType,\n  { title: string; todolistId: string },\n  ThunkError\n>('tasks/addTask', async (param, thunkAPI): Promise<any> => {\n  thunkAPI.dispatch(appActions.setAppStatus({ status: 'loading' }));\n  try {\n    const res = await todolistsAPI.createTask(param.todolistId, param.title);\n\n    if (res.data.resultCode === 0) {\n      thunkAPI.dispatch(appActions.setAppStatus({ status: 'succeeded' }));\n\n      return res.data.data.item;\n    }\n    handleAsyncServerAppError(res.data, thunkAPI, false);\n\n    return thunkAPI.rejectWithValue({\n      errors: res.data.messages,\n      fieldsErrors: res.data.fieldsErrors,\n    });\n  } catch (err) {\n    return handleAsyncServerNetworkError(err as AxiosError, thunkAPI, false);\n  }\n});\nexport const updateTask = createAsyncThunk(\n  'tasks/updateTask',\n  async (\n    param: { taskId: string; model: UpdateDomainTaskModelType; todolistId: string },\n    thunkAPI,\n  ) => {\n    const state = thunkAPI.getState() as AppRootStateType;\n\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId);\n\n    if (!task) {\n      return thunkAPI.rejectWithValue('task not found in the state');\n    }\n\n    const apiModel: UpdateTaskModelType = {\n      deadline: task.deadline,\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      title: task.title,\n      status: task.status,\n      ...param.model,\n    };\n\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel);\n\n    try {\n      if (res.data.resultCode === 0) {\n        return param;\n      }\n\n      return handleAsyncServerAppError(res.data, thunkAPI);\n    } catch (error) {\n      return handleAsyncServerNetworkError(error as AxiosError, thunkAPI);\n    }\n  },\n);\n\nexport const asyncActions = {\n  fetchTasks,\n  removeTask,\n  addTask,\n  updateTask,\n};\n\nexport const slice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\n        state[action.payload.todolist.id] = [];\n      })\n      .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\n        delete state[action.payload.id];\n      })\n      .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\n        action.payload.todolists.forEach((tl: any) => {\n          state[tl.id] = [];\n        });\n      })\n      .addCase(fetchTasks.fulfilled, (state, action) => {\n        state[action.payload.todolistId] = action.payload.tasks;\n      })\n      .addCase(removeTask.fulfilled, (state, action) => {\n        const tasks = state[action.payload.todolistId];\n        const index = tasks.findIndex(t => t.id === action.payload.taskId);\n\n        if (index > -1) {\n          tasks.splice(index, 1);\n        }\n      })\n      .addCase(addTask.fulfilled, (state, action) => {\n        state[action.payload.todoListId].unshift(action.payload);\n      })\n      .addCase(updateTask.fulfilled, (state, action) => {\n        const tasks = state[action.payload.todolistId];\n        const index = tasks.findIndex(t => t.id === action.payload.taskId);\n\n        if (index > -1) {\n          tasks[index] = { ...tasks[index], ...action.payload.model };\n        }\n      });\n  },\n});\n\n// types\nexport type UpdateDomainTaskModelType = {\n  title?: string;\n  description?: string;\n  status?: TaskStatusesType;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\n","import { TodolistsList } from './TodolistsList';\n\nimport {\n  todolistsAsyncActions,\n  todolistsSlice,\n  tasksAsyncActions,\n  tasksSlice,\n} from 'features/TodolistsList/reducer';\n\nconst todolistsActions = {\n  ...todolistsAsyncActions,\n  ...todolistsSlice.actions,\n};\nconst tasksActions = {\n  ...tasksAsyncActions,\n  ...tasksSlice.actions,\n};\n\nconst todolistsReducer = todolistsSlice.reducer;\nconst tasksReducer = tasksSlice.reducer;\n\nexport { tasksActions, todolistsActions, TodolistsList, todolistsReducer, tasksReducer };\n","import React, { ReactElement, useCallback, useEffect } from 'react';\n\nimport './App.css';\nimport {\n  AppBar,\n  Button,\n  CircularProgress,\n  Container,\n  IconButton,\n  LinearProgress,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport { Menu } from '@material-ui/icons';\nimport { useSelector } from 'react-redux';\nimport { Route } from 'react-router-dom';\n\nimport { ErrorSnackbar } from 'components/ErrorSnackbar';\nimport { appActions } from 'features/Application';\nimport {\n  selectIsInitialized,\n  selectIsLoggedIn,\n  selectStatus,\n} from 'features/Application/selectors';\nimport { authActions, Login } from 'features/Auth';\nimport { TodolistsList } from 'features/TodolistsList';\nimport { useActions } from 'utils/redux-utils';\n\ntype PropsType = {\n  demo?: boolean;\n};\n\nconst App = ({ demo = false }: PropsType): ReactElement => {\n  const status = useSelector(selectStatus);\n  const isInitialized = useSelector(selectIsInitialized);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const { logout } = useActions(authActions);\n  const { initializeApp } = useActions(appActions);\n\n  useEffect(() => {\n    if (!demo) {\n      initializeApp();\n    }\n  }, []);\n\n  const onLogoutClick = useCallback(() => {\n    logout();\n  }, []);\n\n  if (!isInitialized) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <ErrorSnackbar />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          {isLoggedIn && (\n            <Button color=\"inherit\" onClick={onLogoutClick}>\n              Log out\n            </Button>\n          )}\n        </Toolbar>\n        {status === 'loading' && <LinearProgress />}\n      </AppBar>\n      <Container fixed>\n        <Route exact path=\"/\" render={() => <TodolistsList demo={demo} />} />\n        <Route path=\"/login\" render={() => <Login />} />\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { appReducer } from 'features/Application';\nimport { authReducer } from 'features/Auth';\nimport { tasksReducer, todolistsReducer } from 'features/TodolistsList';\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  auth: authReducer,\n  todolists: todolistsReducer,\n  tasks: tasksReducer,\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware),\n});\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {HashRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'))\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}